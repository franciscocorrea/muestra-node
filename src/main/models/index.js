/* global run */
if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'staging') {
} else {
  require('dotenv').config()
}
var seaquel = require('seaquel')
var url = process.env.DATABASE_URL
if (url.indexOf('localhost') === -1) {
  url += '?ssl=true'
}
var db = exports.seaquel = seaquel.connect(process.env.DATABASE_URL)

var users = exports.users = db.addTable('users')
users.addColumn('id', 'serial').primaryKey()
users.addColumn('firstName', String)
users.addColumn('lastName', String)
users.addColumn('email', String).unique()
users.addColumn('emailVerified', Boolean).default(false)
users.addColumn('emailVerificationCode', String).unique().nullable()
users.addColumn('forgotPasswordDate', Date).nullable()
users.addColumn('forgotPasswordCode', String).nullable()
users.addColumn('address', String).nullable()
users.addColumn('birthdate', String).nullable()
users.addColumn('dni', String).nullable()
users.addColumn('image', String).nullable()
users.addColumn('mobile', String).nullable().unique()
users.addColumn('loadedCredit', 'integer').default(0)
users.addColumn('earnedCredit', 'integer').default(0)
users.addColumn('password', String).nullable()
users.addColumn('facebook', String).nullable().unique()
users.addColumn('google', String).unique().nullable()
users.addColumn('redsysMerchantIdentifier', String).nullable()
users.addColumn('cardNumber', String).nullable()
users.addColumn('bankAccount', String).nullable()
users.addColumn('redsysExpiryDate', String).nullable()
users.addColumn('mobileVerified', Boolean).default(false)
users.addColumn('mobileVerificationCode', String).nullable()
users.addColumn('deleted', Boolean).default(false)
users.addColumn('createdAt', Date)

var groups = exports.groups = db.addTable('groups')
groups.addColumn('id', 'serial').primaryKey()
groups.addColumn('name', String)
groups.addColumn('credit', 'integer').default(0)
groups.addColumn('share', 'integer').default(0)
groups.addColumn('shareInitial', 'integer').default(0)
groups.addColumn('game', String)
groups.addColumn('membersCount', 'integer').default(1)
groups.addColumn('latestBetBote', 'integer').nullable()
groups.addColumn('latestBetDate', Date).nullable()
groups.addColumn('latestCampaign', Date)
groups.addColumn('image', String).nullable()
groups.addColumn('lastMessage', String).nullable()
groups.addColumn('lastMessageAuthor', String).nullable()
groups.addColumn('public', Boolean).index().default(false)
groups.addColumn('createdAt', Date)
groups.addColumn('updatedAt', Date)

var memberships = exports.memberships = db.addTable('memberships')
memberships.addColumn('level', String)
memberships.addColumn('unreadCount', 'integer').default(0)
memberships.addColumn('pendingPayments', 'integer').default(0)
memberships.addColumn('paymentRetries', 'integer').default(0)
memberships.addColumn('paymentLimit', Date).nullable()
memberships.addColumn('latestPayment', Date)
memberships.addColumn('createdAt', Date)
memberships.addColumn('share', 'integer').default(0)
memberships.addColumn('failed_pay', Boolean).default(false)
memberships.addForeignKey('userId', users.getColumn('id'))
memberships.addForeignKey('groupId', groups.getColumn('id'))
memberships.primaryKey('memberships_pk', 'userId', 'groupId')

var messages = exports.messages = db.addTable('messages')
messages.addColumn('id', 'serial').primaryKey()
messages.addColumn('text', String)
messages.addColumn('createdAt', Date)
messages.addForeignKey('userId', users.getColumn('id'))
messages.addForeignKey('groupId', groups.getColumn('id'))

var sessions = exports.sessions = db.addTable('sessions')
sessions.addColumn('token', String).primaryKey()
sessions.addColumn('lastSeen', Date)
sessions.addColumn('createdAt', Date)
sessions.addForeignKey('userId', users.getColumn('id'))

var devices = exports.devices = db.addTable('devices')
devices.addColumn('id', String).primaryKey()
devices.addColumn('type', String)
devices.addColumn('createdAt', Date)
devices.addForeignKey('userId', users.getColumn('id'))
devices.addForeignKey('session', sessions.getColumn('token')).nullable()

var transactions = exports.transactions = db.addTable('transactions')
transactions.addColumn('id', 'serial').primaryKey()
transactions.addColumn('description', String).default('')
transactions.addColumn('amount', 'integer')
transactions.addColumn('price', 'integer').nullable()
transactions.addColumn('type', String)
transactions.addColumn('previousCredit', 'integer')
transactions.addColumn('createdAt', Date)
transactions.addColumn('betId', 'integer').nullable()
transactions.addForeignKey('userId', users.getColumn('id')).nullable()
transactions.addForeignKey('groupId', groups.getColumn('id')).nullable()

var bets = exports.bets = db.addTable('bets')
bets.addColumn('id', 'serial').primaryKey()
bets.addColumn('game', String)
bets.addColumn('date', Date).index()
bets.addColumn('num', 'integer')
bets.addColumn('bet', 'text')
bets.addColumn('bote', 'integer').nullable()
bets.addColumn('price', 'integer').default(0)
bets.addColumn('externalId', String)
bets.addColumn('createdAt', Date)
bets.addColumn('prize', 'integer').nullable()
bets.addColumn('paidAt', Date).nullable()
bets.addColumn('result', 'json').nullable()
bets.addColumn('joker', String).nullable()
bets.addColumn('millones', String).nullable()
bets.addColumn('lluvia', String).nullable()
bets.addColumn('reintegro', String).nullable()
bets.addColumn('validationDate', Date).nullable()
bets.addColumn('lastValidation', Date).nullable()
bets.addColumn('subscription', Boolean).default(false)
bets.addColumn('escrutado', Boolean).nullable()
bets.addColumn('scrutinizedAt', Date).nullable()
bets.addForeignKey('userId', users.getColumn('id')).nullable()
bets.addForeignKey('groupId', groups.getColumn('id')).nullable()

var subscriptions = exports.subscriptions = db.addTable('subscriptions')
subscriptions.addColumn('id', 'serial').primaryKey()
subscriptions.addForeignKey('userId', users.getColumn('id')).nullable()
subscriptions.addForeignKey('groupId', groups.getColumn('id')).nullable()
subscriptions.addColumn('date', Date).index()
subscriptions.addColumn('game', String)
subscriptions.addColumn('num', 'integer')
subscriptions.addColumn('bet', 'text')
subscriptions.addColumn('price', 'integer').default(0)
subscriptions.addColumn('active', Boolean).default(true)
subscriptions.addColumn('updatedAt', Date)
subscriptions.addColumn('createdAt', Date)

var invitations = exports.invitations = db.addTable('invitations')
invitations.addColumn('id', 'serial').primaryKey()
invitations.addColumn('name', String)
invitations.addColumn('email', String).nullable().index()
invitations.addColumn('mobile', String).nullable().index()
invitations.addColumn('expiresAt', Date).nullable()
invitations.addForeignKey('userId', users.getColumn('id')).nullable()
invitations.addForeignKey('groupId', groups.getColumn('id'))
invitations.addForeignKey('invitedById', users.getColumn('id')).nullable()

var recordDevices = exports.recordDevices = db.addTable('record_devices')
recordDevices.addColumn('id', 'serial').primaryKey()
recordDevices.addColumn('versionNumber', String).nullable()
recordDevices.addColumn('familyDevice', String).nullable()
recordDevices.addColumn('versionLite', Boolean).default(false)
recordDevices.addColumn('createdAt', Date)
recordDevices.addForeignKey('userId', users.getColumn('id')).nullable()

const tpvTransactions = exports.tvpTransactions = db.addTable('tpv_transactions')
tpvTransactions.addColumn('id', 'serial').primaryKey()
tpvTransactions.addForeignKey('userId', users.getColumn('id'))
tpvTransactions.addColumn('token', String)
tpvTransactions.addColumn('order', String)
tpvTransactions.addColumn('amount', 'integer')
tpvTransactions.addColumn('cardBrand', 'integer')
tpvTransactions.addColumn('cardNumber', String)
tpvTransactions.addColumn('expiryDate', String)
tpvTransactions.addColumn('processedAt', Date)
tpvTransactions.addColumn('createdAt', Date)

var notificationBotes = exports.notificationBotes = db.addTable('notification_botes')
notificationBotes.addColumn('id', 'serial').primaryKey()
notificationBotes.addColumn('game', String).nullable()
notificationBotes.addColumn('subscribe', Boolean).default(false)
notificationBotes.addForeignKey('userId', users.getColumn('id')).nullable()

var notificationPrize = exports.notificationPrize = db.addTable('notification_prizes')
notificationPrize.addColumn('id', 'serial').primaryKey()
notificationPrize.addColumn('subscribe', Boolean).default(false)
notificationPrize.addForeignKey('userId', users.getColumn('id')).nullable()

var notificationNews = exports.notificationNews = db.addTable('notification_news')
notificationNews.addColumn('id', 'serial').primaryKey()
notificationNews.addColumn('subscribe', Boolean).default(false)
notificationNews.addForeignKey('userId', users.getColumn('id')).nullable()

const withdrawals = exports.withdrawals = db.addTable('withdrawals')
withdrawals.addColumn('id', 'serial').primaryKey()
withdrawals.addForeignKey('userId', users.getColumn('id')).nullable()
withdrawals.addColumn('amount', 'integer')
withdrawals.addColumn('ibn', String).nullable()
withdrawals.addColumn('processedAt', Date).nullable()
withdrawals.addColumn('createdAt', Date)

const promos = exports.promos = db.addTable('promos')
promos.addColumn('id', 'serial').primaryKey()
promos.addColumn('name', String)
promos.addColumn('code', String)
promos.addColumn('amount', 'integer')
promos.addColumn('activeFrom', Date)
promos.addColumn('activeTo', Date)
promos.addColumn('createdAt', Date)

const incompatiblePromos = exports.incompatiblePromos = db.addTable('incompatible_promos')
incompatiblePromos.addForeignKey('promoId', promos.getColumn('id'))
incompatiblePromos.addForeignKey('incompatibleWith', promos.getColumn('id'))

const promoUser = exports.promoUser = db.addTable('promo_user')
promoUser.addForeignKey('userId', users.getColumn('id'))
promoUser.addForeignKey('promoId', promos.getColumn('id'))
promoUser.addColumn('activatedAt', Date)
promoUser.primaryKey('promo_user_pk', 'userId', 'promoId')

db.sync('drop')
  .then((sql) => {
    if (sql.length > 0) {
      console.log('-------------------------')
      console.log(sql)
      console.log('-------------------------')
      console.log('Run the SQL above to match the required schema')
      if (process.env.NODE_ENV === 'test') {
        process.exit(1)
      }
    }
    if (typeof run === 'function') run()
  })
  .catch((err) => {
    console.log('error', err.stack)
  })
